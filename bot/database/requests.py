from aiogram.types import ChatFullInfo
from sqlalchemy import select, func, update, delete, insert
from datetime import datetime, timedelta

from bot.database.run_db import async_session
from bot.database.models import *


# –ó–∞–ø—É—Å–∫/–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–æ–≤ –≤–æ –≤—Å–µ—Ö —á–∞—Ç–∞—Ö
async def db_change_all_chats_status(new_status: bool) -> bool:
    async with async_session() as session:
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–æ –≤—Å–µ—Ö –∑–∞–ø–∏—Å—è—Ö —Ç–∞–±–ª–∏—Ü—ã chats
            stmt = update(Chat).values(status=new_status)
            await session.execute(stmt)
            await session.commit()
            return True
        except Exception as e:
            await session.rollback()
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —á–∞—Ç–æ–≤: {e}")
            return False


# –í—ã–≤–æ–¥ –∫—Ä–∞—Ç–∫–æ–π –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–∞—Ö –∏–∑ –ë–î
async def get_formatted_chats_list() -> list:
    async with async_session() as session:
        result = await session.execute(select(Chat))

        chat_status_list = [
            f"{i}) {chat.format_info()}"
            for i, chat in enumerate(result.scalars(), 1)
        ]

        return chat_status_list


# –£–¥–∞–ª–∏—Ç—å —á–∞—Ç –ø–æ username
async def db_delete_chat(username: str) -> bool:
    async with async_session() as session:
        try:
            # –£–¥–∞–ª—è–µ–º —á–∞—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º username
            stmt = delete(Chat).where(Chat.username == username)
            result = await session.execute(stmt)
            await session.commit()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–¥–∞–ª–µ–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —á–∞—Ç
            return True if result.rowcount > 0 else False

        except Exception as e:
            await session.rollback()
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —á–∞—Ç–∞ @{username}: {e}")
            return False


# –î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç
async def db_add_chat(chat_full_info: ChatFullInfo) -> bool:
    async with async_session() as session:
        try:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å —á–∞—Ç–∞
            new_chat = {
                "id": chat_full_info.id,
                "title": chat_full_info.title,
                "username": chat_full_info.username,
            }

            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
            stmt = insert(Chat).values(**new_chat)
            await session.execute(stmt)
            await session.commit()

            return True

        except Exception as e:
            await session.rollback()
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —á–∞—Ç–∞: {e}")
            return False


# –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –ø–æ username
async def db_get_chat(username: str) -> dict or None:
    async with async_session() as session:
        try:
            # –ü–æ–ª—É—á–∞–µ–º —á–∞—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            result = await session.execute(
                select(Chat).where(Chat.username == username)
            )
            chat = result.scalar_one_or_none()

            if chat:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —á–∞—Ç–∞
                return {
                    'id': chat.id,
                    'title': chat.title,
                    'username': chat.username,
                    'status': "üü¢" if chat.status else "üî¥",
                    'work_mode': chat.work_mode,
                    'activity_interval_hours': chat.activity_interval_hours,
                    'dialog_chance': chat.dialog_chance,
                    'question_chance': chat.question_chance
                }
            return None

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–∞—Ç–∞ @{username}: {e}")
            return


# –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –ø–æ username
async def db_change_chat(username: str, new_chat_data: dict[str, any]) -> bool:
    async with async_session() as session:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —á—Ç–æ –æ–±–Ω–æ–≤–ª—è—Ç—å
            if not new_chat_data:
                return False

            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            stmt = update(Chat) \
                .where(Chat.username == username) \
                .values(**new_chat_data)

            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            result = await session.execute(stmt)
            await session.commit()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —á–∞—Ç
            return True if result.rowcount > 0 else False

        except Exception as e:
            await session.rollback()
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —á–∞—Ç–∞ @{username}: {e}")
            return False
