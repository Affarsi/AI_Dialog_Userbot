import os
import asyncio
from typing import Union, List
from sqlite3 import OperationalError as SqliteOperationalError
from pyrogram import Client, enums
from sqlalchemy.exc import OperationalError as SqlAlchemyOperationalError

from bot.ai_req import generate_chat_text
from config import Config


# –ó–∞–ø—É—Å–∫–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —é–∑–µ—Ä–±–æ—Ç–æ–≤
async def start_userbot_question(count: int = 1) -> Union[Client, List[Client], bool]:
    session_files = [f for f in os.listdir('bot/pyrogram/temp_files')
                     if f.endswith('.temp_files')]

    if not session_files:
        print("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Å—Å–∏–π —é–∑–µ—Ä–±–æ—Ç–æ–≤ –≤ –ø–∞–ø–∫–µ temp_files/")
        return False

    clients = []
    attempts = 0
    max_attempts = 3  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —é–∑–µ—Ä–±–æ—Ç–∞

    while len(clients) < count and attempts < max_attempts:
        for session_file in session_files:
            if len(clients) >= count:
                break

            session_name = os.path.splitext(session_file)[0]

            try:
                print(f"üîÑ –ü—ã—Ç–∞—é—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —é–∑–µ—Ä–±–æ—Ç–∞: {session_name}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —é–∑–µ—Ä–±–æ—Ç
                if any(c.name == session_name for c in clients):
                    continue

                # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Pyrogram
                client = Client(
                    name=session_name,
                    workdir="bot/pyrogram/temp_files",
                    api_id=Config.api_id,
                    api_hash=Config.api_hash,
                )

                await client.start()
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω —é–∑–µ—Ä–±–æ—Ç: {session_name}")
                clients.append(client)

            except (ConnectionError, SqliteOperationalError, SqlAlchemyOperationalError) as e:
                if "database is locked" in str(e):
                    print(f"‚è≥ –ë–î –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ —É {session_name}, –ø—Ä–æ–±—É—é —Å–ª–µ–¥—É—é—â–µ–≥–æ...")
                else:
                    print(f"‚è≥ –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É {session_name}, –ø—Ä–æ–±—É—é —Å–ª–µ–¥—É—é—â–µ–≥–æ...")
                continue

            except Exception as e:
                print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —É {session_name}: {type(e).__name__} - {e}")
                continue

        if len(clients) < count:
            print(f"üïí –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —é–∑–µ—Ä–±–æ—Ç–æ–≤. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {max_attempts - attempts - 1}")
            attempts += 1
            await asyncio.sleep(60)

    if not clients:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —é–∑–µ—Ä–±–æ—Ç–∞")
        return False

    return clients[0] if count == 1 else clients


# –†–∞–±–æ—Ç–∞ —é–∑–µ—Ä–±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –í–æ–ø—Ä–æ—Å
async def userbot_question(chat_username: str):
    try:
        client = await start_userbot_question(count=1)
        if not client:
            return False

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –¥–ª—è title
        chat = await client.get_chat(chat_username)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å
        question_text = await generate_chat_text(
            chat.title,
            Config.chad_gpt_token,
            mode="question"
        )

        if question_text.startswith(("API Error", "Request failed")):
            print(f"–û—à–∏–±–∫–∞ –ò–ò –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: {question_text}")
            return False

        await client.join_chat(chat_username)
        await client.send_chat_action(chat_username, enums.ChatAction.TYPING)
        await asyncio.sleep(5)
        await client.send_message(chat_username, question_text)
        print(f'–ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–æ–ø—Ä–æ—Å: {question_text}')
        return True

    except Exception as e:
        print(f"Error in userbot_question: {type(e).__name__} - {e}")
        return False
    finally:
        if 'client' in locals():
            await client.stop()


# –†–∞–±–æ—Ç–∞ —é–∑–µ—Ä–±–æ—Ç–æ–≤ –≤ —Ä–µ–∂–∏–º–µ –î–∏–∞–ª–æ–≥
async def userbot_dialog(chat_username: str):
    try:
        clients = await start_userbot_question(count=2)
        if not clients or len(clients) < 2:
            return False

        first_client, second_client = clients[0], clients[1]

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –¥–ª—è title
        chat = await first_client.get_chat(chat_username)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∏–∞–ª–æ–≥
        dialog_text = await generate_chat_text(
            chat.title,
            Config.chad_gpt_token,
            mode="dialog"
        )
        print(dialog_text)
        if dialog_text.startswith(("API Error", "Request failed")):
            print(f"–û—à–∏–±–∫–∞ –ò–ò –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∏–∞–ª–æ–≥–∞: {dialog_text}")
            return False

        # –†–∞–∑–¥–µ–ª—è–µ–º —Ñ—Ä–∞–∑—ã
        phrases = [phrase.strip() for phrase in dialog_text.split(';') if phrase.strip()]

        # –í—Ö–æ–¥–∏–º –≤ —á–∞—Ç
        for client in clients:
            await client.join_chat(chat_username)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ—Ä–∞–∑—ã –ø–æ–æ—á–µ—Ä–µ–¥–Ω–æ
        for i, phrase in enumerate(phrases):
            current_client = first_client if i % 2 == 0 else second_client
            print(f"üí¨ –Æ–∑–µ—Ä–±–æ—Ç {current_client.name} –≥–æ—Ç–æ–≤–∏—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {phrase}")

            typing_time = min(max(len(phrase) / 10, 8), 18)
            await current_client.send_chat_action(chat_username, enums.ChatAction.TYPING)
            chat_action_task = asyncio.create_task(
                send_continuous_chat_action(current_client, chat_username, typing_time)
            )
            await asyncio.sleep(typing_time)
            chat_action_task.cancel()
            await current_client.send_message(chat_username, phrase)
            print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {phrase[:20]}...")
            await asyncio.sleep(2 + i % 3)

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∏–∞–ª–æ–≥–µ: {str(e)}")
        return False
    finally:
        for client in clients:
            await client.stop()


# –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –ø–µ—á–∞—Ç–∞–Ω–∏—è –≤ —Ç–µ—á–µ–Ω–∏–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
async def send_continuous_chat_action(client, chat_id, duration):
    end_time = asyncio.get_event_loop().time() + duration
    while asyncio.get_event_loop().time() < end_time:
        try:
            await client.send_chat_action(chat_id, enums.ChatAction.TYPING)
            await asyncio.sleep(2.5)  # Chat action –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
        except asyncio.CancelledError:
            break
        except Exception:
            break