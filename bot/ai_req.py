import requests
import random


# Генерирует текст (вопрос или диалог) в зависимости от режима
async def generate_chat_text(telegram_chat_title: str, api_key: str, mode: str = "question") -> str:
    url = "https://ask.chadgpt.ru/api/public/gpt-4o-mini"

    if mode == "question":
        prompt = (
            f"Для тестирования бота автоответчика, нужно задать один небольшой вопрос по тематике чата: \"{telegram_chat_title}\". "
            "Важно: вопрос должен быть не большой, ответ должен содержать только вопрос, старайся задавать житейские, светские вопросы, "
            "касаемые тематики чата. Веди себя как обычный человек и не будь сильно зависимым от примеров. "
            "Примеры: \"Добрый день! Можно растения вывозить отсюда?\", "
            "\"Привет! Что от отравления можно купить в аптеке?\", \"Ребята, привет. Где дайвингу можно на Пхукете научиться?\""
        )
    elif mode == "dialog":
        messages_count = random.randint(2, 5)  # Случайное количество сообщений от 3 до 5
        prompt = (
            f"Представь, что в чат зашло 2 пользователя. Название чата: \"{telegram_chat_title}\". "
            f"Составь их диалог из {messages_count} сообщений. "
            f"Первый пользователь задает житейский небольшой вопрос по тематике чата. Второй пользователь ему отвечает."
            "Твоя задача создать максимально человеческое поведение. Не будь зависимым от примеров. "
            "Веди диалог в обычном разговорном стиле. Веди светский диалог, касаемый тематики чата"
            "Ответ дай сплошной строкой текста, где будешь разделять роли значком ';', нигде не добавляй этот знак: \". "
            "Первое сообщение - пользователь, второе - ответчик. Например:\n"
            "Привет! А Вацап работать будет в Китае, если я просто роуминг подключу;Работает , если роумингом будете пользоваться;понял, спасибо!"
        )
    else:
        return "Error: Invalid generation mode"

    try:
        response = requests.post(
            url,
            json={
                "message": prompt,
                "api_key": api_key
            },
            timeout=10
        )
        response.raise_for_status()
        data = response.json()

        if data.get('is_success'):
            return data['response']
        return f"API Error: {data.get('error_message', 'Unknown error')}"

    except Exception as e:
        return f"Request failed: {str(e)}"