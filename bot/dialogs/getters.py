import json
import re
from pathlib import Path

from aiogram_dialog import DialogManager
from pyrogram import Client
from pyrogram.errors import SessionPasswordNeeded
from telethon import TelegramClient

from bot.database.queries import get_formatted_chats_list, db_get_chat, db_change_chat
from bot.dialogs.states_groups import MainDialog
from bot.telethon.telethon_manager import check_proxy_validity


# –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –±–æ—Ç–æ–∞
async def userbots_main_getter(**kwargs):
    # –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å —Å–µ—Å—Å–∏—è–º–∏
    sessions_dir = Path("bot/pyrogram/sessions")
    sessions_dir.mkdir(parents=True, exist_ok=True)  # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç

    # –ü–æ–ª—É—á–∞–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ .session —Ñ–∞–π–ª–æ–≤
    session_files = sorted(
        file.name for file in sessions_dir.glob("*.session") if file.is_file()
    )

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π –∏ HTML-—Ä–∞–∑–º–µ—Ç–∫–æ–π
    formatted_sessions = "\n".join(
        f"{i + 1}) <code>{name}</code> - –≥–æ—Ç–æ–≤ ‚úÖ"
        for i, name in enumerate(session_files)
    )

    return {'session_list': formatted_sessions}



# –í—ã–≤–æ–¥ –∫—Ä–∞—Ç–∫–æ–π –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–∞—Ö –∏–∑ –ë–î
async def main_menu_getter(dialog_manager: DialogManager, **kwargs):
    bot = dialog_manager.event.bot
    chat_status_list = await get_formatted_chats_list()

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —á–∞—Ç—ã –∏–∑ –ë–î
    chats = await db_get_chat()
    if chats:
        for chat in chats:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –∏–∑ Telegram
                tg_chat = await bot.get_chat(chat['id'])
                if tg_chat.title != chat['title']:
                    # –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –æ–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
                    await db_change_chat(chat['username'], {'title': tg_chat.title})
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ title —á–∞—Ç–∞ {chat['username']}: {e}")

    chat_status_list = '\n\n'.join(chat_status_list)
    return {"chat_status_list": chat_status_list}


# –í—ã–≤–æ–¥ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ
async def chat_info_getter(dialog_manager: DialogManager, **kwargs):
    username = dialog_manager.dialog_data.get('chat_settings_username')
    chat = await db_get_chat(username)

    if chat:
        return chat
    else:
        await dialog_manager.event.answer(f'f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–∞—Ç–∞ @{username}')
        await dialog_manager.switch_to(MainDialog.main_menu)


# –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è telethon —Å–µ—Å—Å–∏–∏ –≤ pyrogram —Å–µ—Å—Å–∏—é
async def convert_telethon_to_pyrogram(dialog_manager: DialogManager) -> dict:
    print("[1/5] –ù–∞—á–∞–ª–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ Telethon ‚Üí Pyrogram")

    # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç–∏ –∏ –¥–∞–Ω–Ω—ã–µ
    telethon_session_path = dialog_manager.dialog_data.get('add_bot_session_path')
    telethon_json_path = dialog_manager.dialog_data.get('add_bot_json_path')
    proxy_dict = dialog_manager.dialog_data.get('add_bot_proxy_dict')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∫—Å–∏
    print("[2/5] –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –ø—Ä–æ–∫—Å–∏...")
    proxy_check = await check_proxy_validity(proxy_dict)
    if not proxy_check["result"]:
        return proxy_check

    # –ó–∞–≥—Ä—É–∂–∞–µ–º JSON –¥–∞–Ω–Ω—ã–µ
    try:
        with open(telethon_json_path, 'r') as f:
            json_data = json.load(f)
        print(f"[3/5] JSON —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω (app_id: {json_data['app_id']}, phone: {json_data['phone']})")
    except Exception as e:
        return {"result": False, "result_text": f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ JSON: {str(e)}"}

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é Telethon
    print("[4/5] –ü—Ä–æ–≤–µ—Ä–∫–∞ Telethon —Å–µ—Å—Å–∏–∏...")
    try:
        telethon_client = TelegramClient(
            telethon_session_path,
            api_id=int(json_data['app_id']),
            api_hash=json_data['app_hash'],
        )

        async with telethon_client:
            if not await telethon_client.is_user_authorized():
                return {"result": False, "result_text": "‚ùå Telethon —Å–µ—Å—Å–∏—è –Ω–µ–≤–∞–ª–∏–¥–Ω–∞"}

            me = await telethon_client.get_me()
            account_info = {
                "phone": json_data['phone'],
                "first_name": me.first_name,
                "username": me.username
            }
            print(f"Telethon —Å–µ—Å—Å–∏—è –≤–∞–ª–∏–¥–Ω–∞ (user: {me.first_name or 'None'} @{me.username or 'None'})")
    except Exception as e:
        return {"result": False, "result_text": f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Telethon: {str(e)}"}

    # –°–æ–∑–¥–∞–µ–º Pyrogram —Å–µ—Å—Å–∏—é
    pyrogram_session_path = Path("bot/pyrogram/sessions") / Path(telethon_session_path).stem
    userbot = None

    try:
        print("[5/5] –°–æ–∑–¥–∞–Ω–∏–µ Pyrogram —Å–µ—Å—Å–∏–∏...")
        userbot = Client(
            name=str(pyrogram_session_path),
            api_id=json_data['app_id'],
            api_hash=json_data['app_hash'],
            phone_number=json_data['phone'],
        )

        await userbot.connect()
        send_code_data = await userbot.send_code(json_data['phone'])
        phone_code_hash = send_code_data.phone_code_hash

        async with telethon_client:
            msg_from_telegram = await telethon_client.get_messages(777000, limit=1)
            msg_text = msg_from_telegram[0].message
            code_in_msg = re.search(r'\d+', msg_text)

            if not code_in_msg:
                return {"result": False, "result_text": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –∏–∑ Telegram"}

            phone_code = code_in_msg.group()
            print(f"–ü–æ–ª—É—á–µ–Ω –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {phone_code}")

        # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç
        try:
            # –û–±—ã—á–Ω—ã–π –≤—Ö–æ–¥
            await userbot.sign_in(
                phone_number=json_data['phone'],
                phone_code_hash=phone_code_hash,
                phone_code=phone_code
            )
        except SessionPasswordNeeded:
            # –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è 2FA
            if 'twoFA' not in json_data:
                return {"result": False, "result_text": "‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è 2FA –ø–∞—Ä–æ–ª—å, –Ω–æ –æ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω –≤ JSON"}

            try:
                await userbot.check_password(json_data['twoFA'])
            except Exception as e:
                return {"result": False, "result_text": f"‚ùå –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ 2FA –ø–∞—Ä–æ–ª—è: {str(e)}"}

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        pyrogram_me = await userbot.get_me()

        return {
            "result": True,
            "result_text": (
                f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω!\n\n"
                f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: +{json_data['phone']}\n"
                f"üë§ –ò–º—è: {pyrogram_me.first_name or '–ù–µ—Ç'}\n"
                f"üîó Username: @{pyrogram_me.username or '–ù–µ—Ç'}\n\n"
                f"<code>Pyrogram —Å–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {pyrogram_session_path}.session</code>"
            ),
            "account_info": account_info
        }

    except Exception as e:
        return {"result": False, "result_text": f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Pyrogram —Å–µ—Å—Å–∏–∏: {str(e)}"}
    finally:
        if userbot:
            try:
                await userbot.disconnect()
            except:
                pass


async def add_bot_result_getter(dialog_manager: DialogManager, **kwargs):
    result = await convert_telethon_to_pyrogram(dialog_manager)
    return result